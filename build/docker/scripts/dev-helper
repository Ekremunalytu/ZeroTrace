#!/bin/bash
# ZeroTrace Development Helper Script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Project management commands
case "${1:-help}" in
    "init")
        log_info "Initializing ZeroTrace development environment..."
        
        # Create .env if not exists
        if [ ! -f /workspace/.env ]; then
            cp /workspace/.env.example /workspace/.env
            log_success "Created .env file from template"
        fi
        
        # Initialize database
        log_info "Setting up database..."
        cd /workspace
        python3 -c "
import psycopg2
import os
try:
    conn = psycopg2.connect(
        host=os.getenv('POSTGRES_HOST', 'postgres'),
        database=os.getenv('POSTGRES_DB', 'zerotrace'),
        user=os.getenv('POSTGRES_USER', 'zerotrace'),
        password=os.getenv('POSTGRES_PASSWORD', 'zerotrace_dev_pass')
    )
    print('✅ Database connection successful')
    conn.close()
except Exception as e:
    print(f'❌ Database connection failed: {e}')
    exit(1)
"
        
        # Test RabbitMQ connection
        log_info "Testing message broker..."
        python3 -c "
import pika
import os
try:
    connection = pika.BlockingConnection(
        pika.ConnectionParameters(
            host=os.getenv('RABBITMQ_HOST', 'rabbitmq'),
            port=int(os.getenv('RABBITMQ_PORT', '5672')),
            credentials=pika.PlainCredentials(
                os.getenv('RABBITMQ_USER', 'zerotrace'),
                os.getenv('RABBITMQ_PASSWORD', 'zerotrace_dev_pass')
            )
        )
    )
    print('✅ RabbitMQ connection successful')
    connection.close()
except Exception as e:
    print(f'❌ RabbitMQ connection failed: {e}')
    exit(1)
"
        
        log_success "Development environment initialized!"
        ;;
        
    "build")
        log_info "Building C++ components..."
        cd /workspace
        mkdir -p build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug
        make -j$(nproc)
        log_success "Build completed!"
        ;;
        
    "test")
        log_info "Running tests..."
        cd /workspace
        
        # C++ tests
        if [ -f "build/tests" ]; then
            log_info "Running C++ tests..."
            ./build/tests
        fi
        
        # Python tests
        if [ -d "tests" ]; then
            log_info "Running Python tests..."
            python3 -m pytest tests/ -v
        fi
        
        log_success "Tests completed!"
        ;;
        
    "start-api")
        log_info "Starting API service..."
        cd /workspace/services/api
        python3 -m uvicorn main:app --host 0.0.0.0 --port 8000 --reload
        ;;
        
    "start-ui")
        log_info "Starting UI service..."
        cd /workspace/services/ui
        npm start
        ;;
        
    "start-collector")
        log_info "Starting process collector..."
        cd /workspace
        if [ -f "build/bin/process-collector" ]; then
            ./build/bin/process-collector
        else
            log_error "Process collector not built. Run 'dev-helper build' first."
            exit 1
        fi
        ;;
        
    "logs")
        log_info "Showing service logs..."
        docker-compose logs -f "${2:-}"
        ;;
        
    "shell")
        log_info "Opening shell in ${2:-devcontainer}..."
        docker-compose exec "${2:-devcontainer}" /bin/bash
        ;;
        
    "status")
        log_info "Checking service status..."
        docker-compose ps
        ;;
        
    "clean")
        log_info "Cleaning build artifacts..."
        cd /workspace
        rm -rf build/
        rm -rf cmake-build-*/
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true
        log_success "Cleanup completed!"
        ;;
        
    "help"|*)
        echo "ZeroTrace Development Helper"
        echo ""
        echo "Usage: dev-helper <command> [args]"
        echo ""
        echo "Commands:"
        echo "  init              Initialize development environment"
        echo "  build             Build C++ components"
        echo "  test              Run all tests"
        echo "  start-api         Start API service"
        echo "  start-ui          Start UI service"
        echo "  start-collector   Start process collector"
        echo "  logs [service]    Show logs for service(s)"
        echo "  shell [service]   Open shell in container"
        echo "  status            Show container status"
        echo "  clean             Clean build artifacts"
        echo "  help              Show this help"
        echo ""
        echo "Examples:"
        echo "  dev-helper init"
        echo "  dev-helper build"
        echo "  dev-helper logs rabbitmq"
        echo "  dev-helper shell postgres"
        ;;
esac
